community_areas <- st_read("C:/Users/lenovo/OneDrive - University College London/GIS/casa0005-practice-exam-2023-24-ruicixia1/eviction/geo_export_853c1cc2-259e-48e6-a2f7-55bd540ca941.shp)
community_areas <- st_read("C:/Users/lenovo/OneDrive - University College London/GIS/casa0005-practice-exam-2023-24-ruicixia1/eviction/geo_export_853c1cc2-259e-48e6-a2f7-55bd540ca941.shp")
library(spatstat)
library(sf)
library(spatstat)
community_areas <- st_read("C:/Users/lenovo/OneDrive - University College London/GIS/casa0005-practice-exam-2023-24-ruicixia1/eviction/geo_export_853c1cc2-259e-48e6-a2f7-55bd540ca941.shp")
library(geojsonsf)
evictions_points <- read_csv("C:/Users/lenovo/OneDrive - University College London/GIS/casa0005-practice-exam-2023-24-ruicixia1/eviction/Evictions_20231210.csv, na=c(" "))
evictions_points <- read_csv("C:/Users/lenovo/OneDrive - University College London/GIS/casa0005-practice-exam-2023-24-ruicixia1/eviction/Evictions_20231210.csv, na=c(" "))
evictions_points <- read_csv("C:/Users/lenovo/OneDrive - University College London/GIS/casa0005-practice-exam-2023-24-ruicixia1/eviction/Evictions_20231210.csv", na=c(" "))
install.packages("readr")
library(readr)
evictions_points <- read_csv("C:/Users/lenovo/OneDrive - University College London/GIS/casa0005-practice-exam-2023-24-ruicixia1/eviction/Evictions_20231210.csv", na=c(" "))
Datatypelist
Datatypelist <- evictions_points %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
Datatypelist <- evictions_points %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
View(evictions_points)
library(tidyr)
Datatypelist <- evictions_points %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
library(dplyr)
Datatypelist <- evictions_points %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
Datatypelist
View(Datatypelist)
points <- evictions_points%>%
#also possible to use something like drop_na(Longitdue, Latitude)
filter(Longitude<0 & Latitude>0)%>%
st_as_sf(., coords = c("Longitude", "Latitude"),
crs = 4326)
tmap_mode("plot")
library(tmap)
points <- evictions_points%>%
#also possible to use something like drop_na(Longitdue, Latitude)
filter(Longitude<0 & Latitude>0)%>%
st_as_sf(., coords = c("Longitude", "Latitude"),
crs = 4326)
tmap_mode("plot")
tm_shape(community_areas) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(points) +
tm_dots(col = "blue")
View(community_areas)
community_areas <- community_areas%>%
st_transform(., 4326)
points_sub <- points[community_areas,]
View(points_sub)
points_sub_2020<-points_sub%>%
clean_names()%>%
filter(str_detect(executed_date, "2020"))%>%
# filter(eviction_legal_possession=="Eviction")%>%
filter(residential_commercial=="Residential")
library(janitor)
points_sub_2020<-points_sub%>%
clean_names()%>%
filter(str_detect(executed_date, "2020"))%>%
# filter(eviction_legal_possession=="Eviction")%>%
filter(residential_commercial=="Residential")
library(stringr)
points_sub_2020<-points_sub%>%
clean_names()%>%
filter(str_detect(executed_date, "2020"))%>%
# filter(eviction_legal_possession=="Eviction")%>%
filter(residential_commercial=="Residential")
tmap_mode("plot")
tm_shape(community_areas) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(points_sub_2020) +
tm_dots(col = "blue")
st_transform(., 6538)
community_areas_projected <- community_areas %>%
st_transform(4326, 6538)
points_sub_2020_projected <- points_sub_2020 %>%
st_transform(4326, 6538)
st_crs(community_areas)
st_crs(community_areas)
community_areas_projected <- community_areas %>%
st_transform(4326, 6538)
points_sub_2020_projected <- points_sub_2020 %>%
st_transform(4326, 6538)
window <- as.owin(community_areas_projected)
community_areas_projected <- community_areas %>%
st_transform(community_areas, 6538)
community_areas_projected <- community_areas %>%
st_transform(community_areas, 6538)
community_areas_projected <- community_areas %>%
st_transform(., 6538)
points_sub_2020_projected <- points_sub_2020 %>%
st_transform(., 6538)
window <- as.owin(community_areas_projected)
plot(window)
#create a sp object
points_sub_2020_projected_sp<- points_sub_2020_projected %>%
as(., 'Spatial')
#create a ppp object
points_sub_2020_projected_sp.ppp <- ppp(x=points_sub_2020_projected_sp@coords[,1],
y=points_sub_2020_projected_sp@coords[,2],
window=window)
K <- points_sub_2020_projected_sp.ppp %>%
Kest(., correction="border") %>%
plot()
library(sp)
#first extract the points from the spatial points data frame
points_todf <- points_sub_2020_projected_sp %>%
coordinates(.)%>%
as.data.frame()
#now run the dbscan analysis
points_todf_DBSCAN <- points_todf %>%
fpc::dbscan(.,eps = 1000, MinPts = 50)
points_todf%>%
dbscan::kNNdistplot(.,k=50)
#now quickly plot the results
plot(points_todf_DBSCAN, points_todf, main = "DBSCAN Output", frame = F)
plot(community_areas_projected$geometry, add=T)
points_todf<- points_todf %>%
mutate(dbcluster=points_todf_DBSCAN$cluster)
tosf <- points_todf%>%
st_as_sf(., coords = c("coords.x1", "coords.x2"),
crs = 6538)%>%
filter(dbcluster>0)
ggplot(data = community_areas_projected) +
# add the geometry of the community areas
geom_sf() +
# add the geometry of the points - i have had to set the data here to add the layer
geom_sf(data = tosf, size = 0.4, colour=tosf$dbcluster, fill=tosf$dbcluster)
library(ggplot2)
ggplot(data = community_areas_projected) +
# add the geometry of the community areas
geom_sf() +
# add the geometry of the points - i have had to set the data here to add the layer
geom_sf(data = tosf, size = 0.4, colour=tosf$dbcluster, fill=tosf$dbcluster)
library(tmaptools)
library(tmap)
library(sf)
#tmaptools::palette_explorer()
library(RColorBrewer)
library(tmaptools)
colours<- get_brewer_pal("Set1", n = 19)
tmap_mode("plot")
tm_shape(community_areas) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(tosf) +
tm_dots(col = "dbcluster",  palette = colours, style = "cat")
View(K)
evictions_points <- read_csv("C:/Users/lenovo/OneDrive - University College London/GIS/casa0005-practice-exam-2023-24-ruicixia1/eviction/Evictions_20231210.csv", na=c(" "))
community_areas <- st_read("C:/Users/lenovo/OneDrive - University College London/GIS/casa0005-practice-exam-2023-24-ruicixia1/eviction/geo_export_853c1cc2-259e-48e6-a2f7-55bd540ca941.shp")
Datatypelist <- evictions_points %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
Datatypelist
Datatypelist <- evictions_points %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
Datatypelist
points <- evictions_points%>%
#also possible to use something like drop_na(Longitdue, Latitude)
filter(Longitude<0 & Latitude>0)%>%
st_as_sf(., coords = c("Longitude", "Latitude"),
crs = 4326)
tmap_mode("plot")
tm_shape(community_areas) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(points) +
tm_dots(col = "blue")
community_areas <- community_areas%>%
st_transform(., 4326)
points_sub <- points[community_areas,]
points_sub_2020<-points_sub%>%
clean_names()%>%
filter(str_detect(executed_date, "2020"))%>%
# filter(eviction_legal_possession=="Eviction")%>%
filter(residential_commercial=="Residential")
tmap_mode("plot")
tm_shape(community_areas) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(points_sub_2020) +
tm_dots(col = "blue")
community_areas_projected <- community_areas %>%
st_transform(., 6538)
points_sub_2020_projected <- points_sub_2020 %>%
st_transform(., 6538)
window <- as.owin(community_areas_projected)
plot(window)
#create a sp object
points_sub_2020_projected_sp<- points_sub_2020_projected %>%
as(., 'Spatial')
#create a ppp object
points_sub_2020_projected_sp.ppp <- ppp(x=points_sub_2020_projected_sp@coords[,1],
y=points_sub_2020_projected_sp@coords[,2],
window=window)
K <- points_sub_2020_projected_sp.ppp %>%
Kest(., correction="border") %>%
plot()
library(sp)
#first extract the points from the spatial points data frame
points_todf <- points_sub_2020_projected_sp %>%
coordinates(.)%>%
as.data.frame()
#now run the dbscan analysis
points_todf_DBSCAN <- points_todf %>%
fpc::dbscan(.,eps = 1000, MinPts = 50)
points_todf%>%
dbscan::kNNdistplot(.,k=50)
#now quickly plot the results
plot(points_todf_DBSCAN, points_todf, main = "DBSCAN Output", frame = F)
plot(community_areas_projected$geometry, add=T)
points_todf<- points_todf %>%
mutate(dbcluster=points_todf_DBSCAN$cluster)
View(points_todf)
tosf <- points_todf%>%
st_as_sf(., coords = c("coords.x1", "coords.x2"),
crs = 6538)%>%
filter(dbcluster>0)
View(tosf)
ggplot(data = community_areas_projected) +
# add the geometry of the community areas
geom_sf() +
# add the geometry of the points - i have had to set the data here to add the layer
geom_sf(data = tosf, size = 0.4, colour=tosf$dbcluster, fill=tosf$dbcluster)
library(tmap)
library(sf)
#tmaptools::palette_explorer()
library(RColorBrewer)
library(tmaptools)
colours<- get_brewer_pal("Set1", n = 19)
tmap_mode("plot")
tm_shape(community_areas) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(tosf) +
tm_dots(col = "dbcluster",  palette = colours, style = "cat")
View(evictions_points)
library(sf)
#basic join but gives a new row for each point (e.g. 10 points in borough 1 then 10 rows)
check_example <- community_areas_projected%>%
st_join(tosf)
# spatial join that counts the points per borough
points_sf_joined <- community_areas_projected%>%
mutate(n = lengths(st_intersects(., tosf)))%>%
janitor::clean_names()%>%
#calculate area
mutate(area=st_area(.))%>%
#then density of the points per ward
mutate(density=n/area)
# quick map
tm_shape(points_sf_joined) +
tm_polygons("density",
style="jenks",
palette="PuOr",
title="Eviction density")
library(spdep)
coordsW <- points_sf_joined%>%
st_centroid()%>%
st_geometry()
plot(coordsW,axes=TRUE)
# make neighbours
community_nb <- points_sf_joined %>%
poly2nb(., queen=T)
summary(community_nb)
#plot them
plot(community_nb, st_geometry(coordsW), col="red")
#add a map underneath
plot(points_sf_joined$geometry, add=T)
# make weight matrix
community_nb.lw <- community_nb %>%
nb2mat(., style="W")
sum(community_nb.lw)
# make weight list for Moran's I
community_nb.lw <- community_nb %>%
nb2listw(., style="W")
I_LWard_Global_Density <- points_sf_joined %>%
pull(density) %>%
as.vector()%>%
moran.test(., community_nb.lw)
I_LWard_Global_Density
I_LWard_Local_density <- points_sf_joined %>%
pull(density) %>%
as.vector()%>%
localmoran(., community_nb.lw)%>%
as_tibble()
points_sf_joined <- points_sf_joined %>%
mutate(density_I =as.numeric(I_LWard_Local_density$Ii))%>%
mutate(density_Iz =as.numeric(I_LWard_Local_density$Z.Ii))
breaks1<-c(-1000,-2.58,-1.96,-1.65,1.65,1.96,2.58,1000)
library(RColorBrewer)
MoranColours<- rev(brewer.pal(8, "RdGy"))
tm_shape(points_sf_joined) +
tm_polygons("density_Iz",
style="fixed",
breaks=breaks1,
palette=MoranColours,
midpoint=NA,
title="Local Moran's I, Evicitions in New York")
gc()
library(tidyverse)
library(tmap)
library(rgdal)
install.packages("rgdal")
library(rgdal)
sudo apt-get install gdal-bin proj-bin libgdal-dev libproj-dev
gdalinfo --version
install.packages("devtools")
install.packages("C:/Users/lenovo/Desktop/rgdal_1.6-7.tar.gz", repos = NULL, type = "source")
library(rgdal)
library(tidyverse)
library(tmap)
library(rgdal)
library(broom)
library(mapview)
rgdal--version
rgdal --version
install.packages("C:/Users/lenovo/Desktop/mapview_2.11.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/lenovo/Desktop/mapview_2.11.2.tar.gz", repos = NULL, type = "source")
library(leafem)
install.packages("leafpop")
install.packages("satellite")
install.packages("servr")
library(leafpop)
sessionInfo()
library(tidyverse)
library(sf)
library(tmap)
library(janitor)
library(spatstat)
library(tidyr)
library(readr)
library(dplyr)
library(stringr)
library(ggplot2)
library(tmaptools)
evictions_points <- read_csv("C:/Users/lenovo/OneDrive - University College London/GIS/casa0005-practice-exam-2023-24-ruicixia1/eviction/Evictions_20231210.csv", na=c(" "))
community_areas <- st_read("C:/Users/lenovo/OneDrive - University College London/GIS/casa0005-practice-exam-2023-24-ruicixia1/eviction/geo_export_853c1cc2-259e-48e6-a2f7-55bd540ca941.shp")
Datatypelist <- evictions_points %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
Datatypelist
points <- evictions_points%>%
#also possible to use something like drop_na(Longitdue, Latitude)
filter(Longitude<0 & Latitude>0)%>%
st_as_sf(., coords = c("Longitude", "Latitude"),
crs = 4326)
community_areas <- community_areas%>%
st_transform(., 4326)
points_sub <- points[community_areas,]
points_sub_2020<-points_sub%>%
clean_names()%>%
filter(str_detect(executed_date, "2020"))%>%
# filter(eviction_legal_possession=="Eviction")%>%
filter(residential_commercial=="Residential")
tmap_mode("plot")
tm_shape(community_areas) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(points_sub_2020) +
tm_dots(col = "blue")
test_points_sub<-points_sub_2020%.%
filter(eviction_legal_possession=="Eviction")
test_points_sub<-points_sub_2020%>%
filter(eviction_legal_possession=="Eviction")
test_points_sub<-points_sub%>%
filter(str_detect(executed_date, "2020"))%>%
filter(eviction_legal_possession=="Eviction")%>%
filter(residential_commercial=="Residential")
test_points_sub<-points_sub_2020%>%
filter(str_detect(executed_date, "2020"))%>%
filter(eviction_legal_possession=="Eviction")%>%
filter(residential_commercial=="Residential")
tmap_mode("plot")
tm_shape(community_areas) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(points_sub_2020) +
tm_dots(col = "blue")
community_areas_projected <- community_areas %>%
st_transform(., 6538)
points_sub_2020_projected <- points_sub_2020 %>%
st_transform(., 6538)
window <- as.owin(community_areas_projected)
plot(window)
#create a sp object
points_sub_2020_projected_sp<- points_sub_2020_projected %>%
as(., 'Spatial')
#create a ppp object
points_sub_2020_projected_sp.ppp <- ppp(x=points_sub_2020_projected_sp@coords[,1],
y=points_sub_2020_projected_sp@coords[,2],
window=window)
K <- points_sub_2020_projected_sp.ppp %>%
Kest(., correction="border") %>%
plot()
library(sp)
#first extract the points from the spatial points data frame
points_todf <- points_sub_2020_projected_sp %>%
coordinates(.)%>%
as.data.frame()
#now run the dbscan analysis
points_todf_DBSCAN <- points_todf %>%
fpc::dbscan(.,eps = 1000, MinPts = 50)
points_todf%>%
dbscan::kNNdistplot(.,k=50)
#now quickly plot the results
plot(points_todf_DBSCAN, points_todf, main = "DBSCAN Output", frame = F)
plot(community_areas_projected$geometry, add=T)
points_todf<- points_todf %>%
mutate(dbcluster=points_todf_DBSCAN$cluster)
tosf <- points_todf%>%
st_as_sf(., coords = c("coords.x1", "coords.x2"),
crs = 6538)%>%
filter(dbcluster>0)
ggplot(data = community_areas_projected) +
# add the geometry of the community areas
geom_sf() +
# add the geometry of the points - i have had to set the data here to add the layer
geom_sf(data = tosf, size = 0.4, colour=tosf$dbcluster, fill=tosf$dbcluster)
library(tmap)
library(sf)
#tmaptools::palette_explorer()
library(RColorBrewer)
library(tmaptools)
colours<- get_brewer_pal("Set1", n = 19)
tmap_mode("plot")
tm_shape(community_areas) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(tosf) +
tm_dots(col = "dbcluster",  palette = colours, style = "cat")
library(sf)
#basic join but gives a new row for each point (e.g. 10 points in borough 1 then 10 rows)
check_example <- community_areas_projected%>%
st_join(tosf)
# spatial join that counts the points per borough
points_sf_joined <- community_areas_projected%>%
mutate(n = lengths(st_intersects(., tosf)))%>%
janitor::clean_names()%>%
#calculate area
mutate(area=st_area(.))%>%
#then density of the points per ward
mutate(density=n/area)
# quick map
tm_shape(points_sf_joined) +
tm_polygons("density",
style="jenks",
palette="PuOr",
title="Eviction density")
library(spdep)
coordsW <- points_sf_joined%>%
st_centroid()%>%
st_geometry()
plot(coordsW,axes=TRUE)
# make neighbours
community_nb <- points_sf_joined %>%
poly2nb(., queen=T)
summary(community_nb)
#plot them
plot(community_nb, st_geometry(coordsW), col="red")
#add a map underneath
plot(points_sf_joined$geometry, add=T)
# make weight matrix
community_nb.lw <- community_nb %>%
nb2mat(., style="W")
sum(community_nb.lw)
# make weight list for Moran's I
community_nb.lw <- community_nb %>%
nb2listw(., style="W")
I_LWard_Global_Density <- points_sf_joined %>%
pull(density) %>%
as.vector()%>%
moran.test(., community_nb.lw)
I_LWard_Global_Density
I_LWard_Local_density <- points_sf_joined %>%
pull(density) %>%
as.vector()%>%
localmoran(., community_nb.lw)%>%
as_tibble()
I_LWard_Local_density <- points_sf_joined %>%
pull(density) %>%
as.vector()%>%
localmoran(., community_nb.lw)%>%
as_tibble()
points_sf_joined <- points_sf_joined %>%
mutate(density_I =as.numeric(I_LWard_Local_density$Ii))%>%
mutate(density_Iz =as.numeric(I_LWard_Local_density$Z.Ii))
breaks1<-c(-1000,-2.58,-1.96,-1.65,1.65,1.96,2.58,1000)
library(RColorBrewer)
MoranColours<- rev(brewer.pal(8, "RdGy"))
tm_shape(points_sf_joined) +
tm_polygons("density_Iz",
style="fixed",
breaks=breaks1,
palette=MoranColours,
midpoint=NA,
title="Local Moran's I, Evicitions in New York")
View(coordsW)
https://blog.csdn.net/weixin_41346050/article/details/103258359
install.packages(tinytex)
install.packages("tinytex")
library(tinytex)
